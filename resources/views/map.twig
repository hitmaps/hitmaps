{% extends 'base.twig' %}

{% set page_title = "#{model.mission}/#{model.locationNameOne}" %}
{% set body_class = "map" %}
{% set footer_style = "display: none" %}

{% block headextend %}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css"
          integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
          crossorigin=""/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.pm@latest/dist/leaflet.pm.css" />
    <link rel="stylesheet" href="/css/bootstrap-select.min.css">
    <link rel="stylesheet" href="/css/map.css">

    <script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"
            integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA=="
            crossorigin=""></script>
    <script src="https://unpkg.com/leaflet.pm@latest/dist/leaflet.pm.min.js"></script>
    <script src="/js/bootstrap-select.min.js"></script>
    <script src="/js/map.js"></script>
{% endblock %}
{% block content %}
    <div class="overlay" style="background: #ccc url('{{ settings.cdnLocation }}/{{ model.jpgBackgroundFileExtension }}/backgrounds/loading.{{ model.jpgBackgroundFileExtension }}') no-repeat; background-size: cover">
        <div class="overlay-container">
            <img class="img-fluid" src="{{ settings.cdnLocation }}/{{ model.pngBackgroundFileExtension }}/mission-thumbnails/{{ model.game }}/{{ model.missionSlug }}.{{ model.pngBackgroundFileExtension }}" alt="Mission Thumbnail">
            <div class="footer">
                <div class="footer-image">
                    <img src="/img/game-icons/mission-inverted.png" class="img-fluid" alt="Mission Icon">
                </div>
                <div class="footer-text">
                    <h2>Mission</h2>
                    <h1>{{ model.mission }}</h1>
                </div>
            </div>
        </div>
    </div>
    <div class="content">
        <div class="floor-toggle">
            {% for i in model.highestFloor..model.lowestFloor %}
                <div class="floor-info" data-floor="{{ i }}">
                    <div class="floor{% if model.startingFloor == i %} selected{% endif %}">
                        Level {{ i }}
                    </div>
                    <div class="item-count">#</div>
                </div>
            {% endfor %}
        </div>
        <div id="map"></div>
        <nav class="navbar navbar-fixed-right navbar-dark">
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <div class="header">
                    <a href="/">
                        <img src="{{ settings.cdnLocation }}/{{ model.pngBackgroundFileExtension }}/logos/map-header.{{ model.pngBackgroundFileExtension }}" class="img-fluid">
                    </a>
                </div>
                <div class="editor-enabled" style="display: none">
                    <h3>Editor Enabled</h3>
                </div>
                <div id="map-control">
                    <div class="control-buttons">
                        <input type="hidden" name="edit-mode" value="0">
                        {% if model.loggedIn %}
                            <button id="edit-button" class="btn control-button" data-toggle="tooltip" title="Edit Map"><i class="fas fa-pencil-alt"></i></button>
                            <a href="/user/profile">
                                <button class="btn control-button" data-toggle="tooltip" data-placement="bottom" title="Profile"><i class="fas fa-user-circle"></i></button>
                            </a>
                            <a href="/user/logout">
                                <button class="btn control-button" data-toggle="tooltip" data-placement="bottom" title="Log out"><i class="fas fa-sign-out-alt"></i></button>
                            </a>
                        {% else %}
                            <a href="/user/login">
                                <button class="btn control-button" data-toggle="tooltip" data-placement="bottom" title="Login / Register to edit"><i class="fas fa-sign-in-alt"></i></button>
                            </a>
                        {% endif %}
                    </div>
                </div>
                <br>
                <div class="accordion" id="accordion">
                    <div class="floor-toggle">
                        {% for i in model.highestFloor..model.lowestFloor %}
                            <div class="floor-info" data-floor="{{ i }}">
                                <div class="floor{% if model.startingFloor == i %} selected{% endif %}">
                                    Level {{ i }}
                                </div>
                                <div class="item-count">#</div>
                            </div>
                        {% endfor %}
                    </div>
                    <div class="search-box">
                        <select name="search" class="selectpicker" data-live-search="true" data-title="<i class='fas fa-search'></i> Search" data-style="control-button">
                            {% for typeName,type in model.searchableNodes %}
                                {% for group in type.items %}
                                    <optgroup label="{{ group.name }}">
                                        {% for node in group.items %}
                                            <option data-layer="{{ typeName }}|{{ group.name }}">{{ node.name }}</option>
                                        {% endfor %}
                                    </optgroup>
                                {% endfor %}
                            {% endfor %}
                        </select>
                        <button id="clear-search" class="btn control-button" data-toggle="tooltip" title="Clear Search" style="display: none"><i class="fas fa-times"></i></button>
                    </div>
                    <div class="search-box">
                        <select name="disguises" class="selectpicker" data-live-search="true" data-title="Disguises" data-style="control-button">
                            {% for disguise in model.disguises %}
                                <option data-content="<img src='{{ settings.cdnLocation }}/{{ model.jpgBackgroundFileExtension }}/{{ disguise.image }}.{{ model.jpgBackgroundFileExtension }}' alt='{{ disguise.name }} Icon' style='height: 75px; width: 75px'> {{ disguise.name }}">{{ disguise.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="hide-or-select-all">
                        <button id="hide-all" class="btn control-button"><i class="far fa-fw fa-eye-slash"></i> Hide All</button>
                        <button id="show-all" class="btn control-button"><i class="far fa-fw fa-eye"></i> Show All</button>
                    </div>
                    {% for typeName,type in model.nodes %}
                        <div class="card">
                            <div class="card-header" id="header-{{ loop.index0 }}">
                                <div class="name collapsed" data-toggle="collapse"
                                     data-target="#body-{{ loop.index0 }}" aria-expanded="false" aria-controls="body-{{ loop.index0 }}">
                                    {{ typeName }}
                                    <span class="float-right">
                                    <i class="fas fa-caret-down"></i>
                                    <i class="fas fa-caret-up"></i>
                                </span>
                                </div>
                                <div class="visibility-toggle group-toggle" data-layer="{{ typeName }}|*">
                                    <i class="far fa-eye"></i>
                                    <i class="far fa-eye-slash"></i>
                                </div>
                            </div>
                            <div id="body-{{ loop.index0 }}" class="collapse" aria-labelledby="header-{{ loop.index0 }}">
                                <div class="card-body">
                                    {% for groupName,group in type.items %}
                                        <div class="{{ group.collapsible ? 'full-width' : 'half-width' }}">
                                            <div class="name" data-layer="{{ typeName }}|{{ groupName }}">
                                                <img src="/img/map-icons/{{ group.icon }}.png" alt="{{ groupName }} Icon" class="img-fluid">
                                                <span>{{ groupName }}</span>
                                            </div>
                                            {% if group.collapsible %}
                                                <div class="visibility-toggle collapsed" data-toggle="collapse" data-target="#collapsible-{{ typeName|replace({' ': '_'}) }}-{{ groupName|replace({' ': '_'}) }}">
                                                    <i class="fas fa-caret-up"></i>
                                                    <i class="fas fa-caret-down"></i>
                                                </div>
                                                <div class="collapsible-items collapse" id="collapsible-{{ typeName|replace({' ': '_'}) }}-{{ groupName|replace({' ': '_'}) }}">
                                                    <ul style="columns: {{ group.items|length > 1 ? 2 : 1 }}">
                                                        {% for node in group.items %}
                                                            <li>
                                                                {% if node.icon != group.icon %}
                                                                    <img src="/img/map-icons/{{ node.icon }}.png" alt="{{ node.name }} Icon" class="img-fluid">
                                                                {% endif %}
                                                                {{ node.name }}
                                                            </li>
                                                        {% endfor %}
                                                    </ul>
                                                </div>
                                            {% endif %}
                                        </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                <div class="edit-menu" style="display: none">
                    <h2>Editor Menu</h2>
                    <h3>What would you like to do?</h3>
                    <div class="editor-button" data-editor="items">
                        <h3><i class="fas fa-fw fa-map-marker-alt"></i> Add / Remove Items</h3>
                    </div>
                    <div class="editor-button" data-editor="ledges">
                        <h3><i class="fas fa-fw fa-bezier-curve"></i> Add / Remove Ledges</h3>
                    </div>
                    <p>Click the <i class="fas fa-pencil-alt"></i> icon to close the editor menu.</p>
                </div>
                <div class="items-menu" style="display: none">
                    <p><i class="fas fa-fw fa-plus-circle"></i> Click anywhere on the map to add a new item.</p>
                    <p><i class="fas fa-fw fa-arrows-alt"></i> Drag and drop an existing item to move it.</p>
                    <p><i class="fas fa-fw fa-trash"></i> Click on an existing item and then the "Delete" button to delete it.</p>
                    <p><b>Known Issue:</b> When adding an item for the first time (the first non-lethal melee, first stairwell, etc), it will not appear until you refresh the page.</p>
                    <div class="editor-button" data-item="cancel">
                        <h3><i class="fas fa-times-circle"></i> Close Item Menu</h3>
                    </div>
                </div>
                <div class="ledges-menu" style="display: none">
                    <p data-ledge="delete-help"><i class="fas fa-trash"></i> Click on an existing ledge to delete it.</p>
                    <div class="editor-button" data-ledge="add">
                        <h3><i class="fas fa-plus-circle"></i> Add Ledge</h3>
                        <p>Click here to enable / disable ledge builder</p>
                    </div>
                    <div class="editor-button" data-ledge="cancel">
                        <h3><i class="fas fa-times-circle"></i> Close Ledge Menu</h3>
                    </div>
                </div>
            </div>
        </nav>
        <div class="modal" id="confirm-move-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Move</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/api/nodes/move" method="post">
                        <input type="hidden" name="node-id">
                        <input type="hidden" name="latitude">
                        <input type="hidden" name="longitude">
                        <div class="modal-body">
                            <div class="alert alert-warning">
                                Are you sure you want to re-position this item?
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">No, cancel</button>
                            <button type="submit" class="btn btn-primary">Yes, save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="modal" id="confirm-delete-ledge-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Delete Ledge</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <input type="hidden" name="ledge-id">
                    <div class="modal-body">
                        <div class="alert alert-warning">
                            Are you sure you want to delete this ledge?
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" id="delete-ledge-btn" class="btn btn-danger">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal" id="suggest-edit-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="add-suggest-title">{{ model.editorTitle }}</h5>
                        <h5 class="modal-title" id="edit-suggest-title">Edit Item</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/api/nodes" method="post">
                        <div class="modal-body">
                            <div class="alert alert-primary" style="font-size: .8em">
                                You can now use a template to auto-fill item information for common items!
                                <b>If you select a template, all information in "Item Info" and "Notes" will be replaced with
                                    the template's information.</b>
                            </div>
                            <h3>Apply Template</h3>
                            <div class="form-group row">
                                <label for="template" class="col-sm-2 col-form-label">Template</label>
                                <div class="col-sm-10">
                                    <select name="template" class="form-control selectpicker" title="Select One" data-live-search="true">
                                        {% for type,items in model.predeterminedItems %}
                                            <optgroup label="{{ type }}">
                                                {% for item in items %}
                                                    <option data-type="{{ type }}"
                                                            data-subgroup="{{ item.subgroup }}"
                                                            data-icon="{{ item.icon }}"
                                                            data-description="{{ item.description }}"
                                                            data-requirement="{{ item.requirement }}"
                                                            data-warning="{{ item.warning }}"
                                                            data-information="{{ item.information }}"
                                                            data-group="{{ item.group }}"
                                                            data-target="{{ item.target }}"
                                                            data-searchable="{{ item.searchable }}"
                                                        data-image="{{ item.image }}">{{ item.name }}</option>
                                                {% endfor %}
                                            </optgroup>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <hr>
                            <h3>Item Info</h3>
                            <div class="alert alert-dark" style="font-size: .8em">
                                Please indicate the following under the notes section when adding items:
                                <ul>
                                    <li>Any <b>required</b> items, such as needing a wrench for loosening valves (use type "Requirement")</li>
                                    <li>Whether or not the action is <b>suspicious</b> when wearing a certain disguise (use type "Warning")</li>
                                    <li>If you feel something <b>requires more information</b>, use the "Information" type</li>
                                    <li>You may add the in-game description for items by using the "Description" type <b>if there is no name field provided.</b></li>
                                    <li>Any notes with blank text will not be added to the node</li>
                                </ul>
                            </div>
                            <div class="form-group row">
                                <label for="subgroup" class="col-sm-2 col-form-label">Category</label>
                                <div class="col-sm-10">
                                    <select name="subgroup" class="form-control selectpicker" title="Select One" data-live-search="true">
                                        {% for type,categories in model.nodeCategories %}
                                            <optgroup label="{{ type }}">
                                                {% for category in categories %}
                                                    <option value="{{ type }}|{{ category.subgroup }}"
                                                            data-content="<img height='24' width='24' src='/img/map-icons/{{ category.icon }}.png' alt='{{ category.group }} Icon'> {{ category.group }}"
                                                            data-icon="{{ category.icon }}"
                                                            data-searchable="{{ category.searchable }}"
                                                            {% if category.requireName %} data-name="true" {% endif %}
                                                            {% if category.requireAction %} data-action="true" {% endif %}
                                                            {% if category.requireTarget %} data-target="true" {% endif %}
                                                            {% if category.requirePickup %} data-pickup="true" {% endif %}
                                                            {% if category.note != null %} data-note="{{ category.note }}" {% endif %}
                                                            {% if category.requireDirection %} data-direction="true" {% endif %}>
                                                        {{ category.group }}
                                                    </option>
                                                {% endfor %}
                                            </optgroup>
                                        {% endfor %}
                                    </select>
                                    <input type="hidden" name="group">
                                    <small class="form-text text-muted" id="note-help-text">
                                    </small>
                                </div>
                            </div>
                            <div class="form-group row" id="icon-form-group">
                                <label for="icon" class="col-sm-2 col-form-label">Icon</label>
                                <div class="col-sm-10">
                                    <select name="icon" class="form-control selectpicker" data-live-search="true">
                                        {% for group,icons in model.icons %}
                                            <optgroup label="{{ group }}">
                                                {% for icon in icons %}
                                                    <option data-content="<img height='24' width='24' src='/img/map-icons/{{ icon.icon }}.png' alt='{{ icon.altText }} Icon'> {{ icon.altText }}" value="{{ icon.icon }}">{{ icon.altText }}</option>
                                                {% endfor %}
                                            </optgroup>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <div class="form-group row" data-type="name" style="display: none">
                                <label for="name" class="col-sm-2 col-form-label">Name</label>
                                <div class="col-sm-10">
                                    <input type="text" name="name" class="form-control">
                                    <small class="form-text text-muted">
                                        Enter the name as it appears in-game.
                                    </small>
                                </div>
                            </div>
                            <div class="form-group row" data-type="action" style="display: none">
                                <label for="action" class="col-sm-2 col-form-label">
                                    Action
                                </label>
                                <div class="col-sm-10">
                                    <input type="text" name="action" class="form-control">
                                    <small class="form-text text-muted">
                                        Enter the action that is performed (such as "loosen the valve", "turn on radio", "trigger fire alarm", etc.)
                                    </small>
                                </div>
                            </div>
                            <div class="form-group row" data-type="target" style="display: none">
                                <label for="target" class="col-sm-2 col-form-label">
                                    Target
                                </label>
                                <div class="col-sm-10">
                                    <input type="text" name="target" class="form-control">
                                    <small class="form-text text-muted">
                                        Who will be poisoned?
                                    </small>
                                </div>
                            </div>
                            <div class="form-group row" data-type="pickup" style="display: none">
                                <label for="pickup-type" class="col-sm-2 col-form-label">
                                    Type
                                </label>
                                <div class="col-sm-10">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="pickup-type" value="large" checked>
                                        <label class="form-check-label" for="large">
                                            Pickup (Large)
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="pickup-type" value="small">
                                        <label class="form-check-label" for="small">
                                            Stash (Small)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row" data-type="direction" style="display: none">
                                <label for="stairwell-direction" class="col-sm-2 col-form-label">
                                    Direction
                                </label>
                                <div class="col-sm-10">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="stairwell-direction" value="up-stair" checked>
                                        <label class="form-check-label" for="up-stair">
                                            Up Only
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="stairwell-direction" value="up-down-stair">
                                        <label class="form-check-label" for="up-down-stair">
                                            Up and Down
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="stairwell-direction" value="down-stair">
                                        <label class="form-check-label" for="down-stair">
                                            Down Only
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <h3>Notes</h3>
                            <div id="suggest-notes">
                                <div class="form-group row">
                                    <label for="note-type[]" class="col-sm-2 col-form-label">Type</label>
                                    <div class="col-sm-10">
                                        <select class="form-control selectpicker" name="note-type[]">
                                            <option value="requirement">Requirement</option>
                                            <option value="warning">Warning</option>
                                            <option value="info">Information</option>
                                            <option value="description">Description</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label for="note-text[]" class="col-sm-2 col-form-label">Text</label>
                                    <div class="col-sm-10">
                                        <input type="text" name="note-text[]" class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-8 offset-sm-2">
                                    <button type="button" id="add-note-button" class="btn btn-dark">+ Add Another Note</button>
                                </div>
                            </div>
                            <div class="note-template" style="display: none">
                                <div class="form-group row">
                                    <label for="note-type[]" class="col-sm-2 col-form-label">Type</label>
                                    <div class="col-sm-10">
                                        <select class="form-control" name="note-type[]">
                                            <option value="requirement">Requirement</option>
                                            <option value="warning">Warning</option>
                                            <option value="info">Information</option>
                                            <option value="description">Description</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label for="note-text[]" class="col-sm-2 col-form-label">Text</label>
                                    <div class="col-sm-10">
                                        <input type="text" name="note-text[]" class="form-control">
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" name="mission-id" value="{{ model.missionId }}">
                            <input type="hidden" name="level" value="{{ model.startingFloor }}">
                            <input type="hidden" name="latitude">
                            <input type="hidden" name="longitude">
                            <input type="hidden" name="image">
                            <input type="hidden" name="difficulty" value="{{ model.difficulty }}">
                            <input type="hidden" name="searchable" value="0">
                            <input type="hidden" name="id" value="-1">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script type="text/html" id="popup-template" aria-hidden="true">
        <div>
            <img src="#" alt="Image template holder">
            <div data-name="name">Stove</div>
            <div data-name="group">Explosion</div>
            <div data-name="target">
                <i class="far"></i>
                <span>Start Gas Leak</span>
            </div>
            <div data-name="notes"></div>
            {% if model.canDeleteNodes %}
                <button class="btn btn-danger btn-sm" data-action="delete-btn" data-node-id="x" data-toggle="tooltip" title="Delete">
                    <i class="fas fa-times"></i>
                </button>
                <button class="btn btn-warning btn-sm" data-action="edit-btn" data-node-id="x" data-toggle="tooltip" title="Edit">
                    <i class="fas fa-pencil-alt"></i>
                </button>
            {% endif %}
        </div>
    </script>
    <script type="text/html" id="popup-note-template" aria-hidden="true">
        <div>
            <div>
                <div class="in-game-description">In-game Description:</div>
                <div data-name="note-contents"></div>
            </div>
        </div>
    </script>
    <div id="temp" style="display: none"></div>
    <script>
        function showMap() {
            $('.overlay').hide();
        }

        var g_mapLoaded = false;
        var g_loadImmediate = false;
        setTimeout(function() {
            if (g_mapLoaded) {
                showMap();
            } else {
                g_loadImmediate = true;
            }
        }, 1000);

        var g_mapLayers = {};
        var g_overlays = {};
        var g_map;
        var g_lowestFloor = {{ model.lowestFloor }};
        var g_highestFloor = {{ model.highestFloor }};
        var g_startingFloor = {{ model.startingFloor }};
        var g_openMarker = undefined;
        var g_workingLedgeVertices = [];
        var g_workingLedgeLayers = [];

        // Initialize g_overlays for each floor
        for (var i = g_lowestFloor; i <= g_highestFloor; i++) {
            g_overlays[i] = {};
        }

        $('#hide-all').click(function() {
            var pois =$('div[data-layer^="Points of Interest"]');
            $.each(pois, function() {
                var $poi = $(this);
                if (!$poi.hasClass('map-hidden')) {
                    $poi.click();
                }
            });

            var weaponsAndTools =$('div[data-layer^="Weapons and Tools"]');
            $.each(weaponsAndTools, function() {
                var $weaponOrTool = $(this);
                if (!$weaponOrTool.hasClass('map-hidden')) {
                    $weaponOrTool.click();
                }
            });

            var navigations =$('div[data-layer^="Navigation"]');
            $.each(navigations, function() {
                var $navigation = $(this);
                if (!$navigation.hasClass('map-hidden')) {
                    $navigation.click();
                }
            });
        });

        $('#show-all').click(function() {
            var pois =$('div[data-layer^="Points of Interest"]');
            $.each(pois, function() {
                var $poi = $(this);
                if ($poi.hasClass('map-hidden')) {
                    $poi.click();
                }
            });

            var weaponsAndTools =$('div[data-layer^="Weapons and Tools"]');
            $.each(weaponsAndTools, function() {
                var $weaponOrTool = $(this);
                if ($weaponOrTool.hasClass('map-hidden')) {
                    $weaponOrTool.click();
                }
            });

            var navigations =$('div[data-layer^="Navigation"]');
            $.each(navigations, function() {
                var $navigation = $(this);
                if ($navigation.hasClass('map-hidden')) {
                    $navigation.click();
                }
            });
        });

        $('div[data-layer]').click(function() {
            var target = $(this).attr('data-layer');
            var shouldShow = $(this).hasClass('map-hidden');
            target = target.replace('*', '');
            var targetParts = target.split('|');

            if (shouldShow) {
                $('div[data-layer^="' + target + '"]').removeClass('map-hidden');

                // Always re-enable the type's icon since *something* is showing
                $('div[data-layer="' + targetParts[0] + '|*"]').removeClass('map-hidden');
            } else {
                $('div[data-layer^="' + target + '"]').addClass('map-hidden');
            }

            updateNodeLayerState();
        });

        $.ajax({
            url: '/api/nodes?missionId={{ model.missionId }}&difficulty={{ model.difficulty }}',
            method: 'GET',
            success: function(data) {
                json = JSON.parse(data);

                var allLayerGroups = [];
                // Build layer groups
                for (var i in json.categories) {
                    var category = json.categories[i];
                    for (var j = g_lowestFloor; j <= g_highestFloor; j++) {
                        g_overlays[j][category.type + '|' + category.group] = L.layerGroup();
                        allLayerGroups.push(g_overlays[j][category.type + '|' + category.group]);
                    }
                }

                var nodes = json.nodes;
                for (var typeName in nodes) {
                    var type = nodes[typeName];
                    for (var groupName in type.items) {
                        var group = type.items[groupName];
                        for (var k in group.items) {
                            var node = group.items[k];
                            var marker = buildMarker(node).bindPopup(buildPopup);
                            if (node.name !== '') {
                                marker.bindTooltip(node.name);
                            }

                            marker.addTo(g_overlays[node.level][typeName + '|' + groupName]);
                        }
                    }
                }

                var ledges = json.ledges;
                for (var i in ledges) {
                    var ledge = ledges[i];
                    buildLedge(ledge).addTo(g_overlays[ledge.level]['Navigation|Ledge']);
                }

                // Build tile layers for each floor
                for (var j = g_lowestFloor; j <= g_highestFloor; j++) {
                    var mapTileLayer = L.tileLayer('/maps/{{ model.mapFolderName }}/tiles/' + j + '/{z}/{x}/{y}.png', {
                        noWrap: true,
                        minZoom: 3,
                        maxZoom: 5
                    });
                    allLayerGroups.push(mapTileLayer);
                    g_mapLayers[j] = mapTileLayer;
                }

                g_map = L.map('map', {
                    maxZoom: 5,
                    minZoom: 3,
                    crs: L.CRS.Simple,
                    layers: allLayerGroups
                }).setView([{{ model.mapCenterLatitude }}, {{ model.mapCenterLongitude }}], 3);
                g_map.setMaxBounds([[{{ model.topLeftCoordinate }}], [{{ model.bottomRightCoordinate }}]]);
                g_map.addEventListener('click', function(e) {
                    if (parseInt($('input[type="hidden"][name="edit-mode"]').val()) !== 1) {
                        return;
                    }

                    console.debug('Editor enabled. Displaying modal.');
                    $('#suggest-notes').html('').append($('.note-template').html());
                    $('select[name="template"]').selectpicker('val', -1);
                    $('select[name="subgroup"]').selectpicker('val', -1);
                    $('select[name="icon"]').selectpicker('val', -1);
                    $('#suggest-edit-modal')
                        .find('#add-suggest-title').show().end()
                        .find('#edit-suggest-title').hide().end()
                        .find('input[name="name"]').val('').end()
                        .find('input[name="action"]').val('').end()
                        .find('input[name="target"]').val('').end()
                        .find('input[name="latitude"]').val(e.latlng.lat).end()
                        .find('input[name="longitude"]').val(e.latlng.lng).end()
                        .find('input[name="searchable"]').val(0).end()
                        .find('input[name="image"]').val('').end()
                        .find('[data-type="direction"]').hide().end()
                        .find('[data-type="pickup"]').hide().end()
                        .find('[data-type="target"]').hide().end()
                        .find('[data-type="action"]').hide().end()
                        .find('[data-type="name"]').hide().end()
                        .find('input[name="id"]').val(-1).end()
                        .modal('show');
                });
                var zoom = L.control.zoom({position: 'topright'});
                zoom.addTo(g_map);
                $('#map-control').append(zoom.getContainer());

                // Show the starting level's tiles
                for (var j = g_lowestFloor; j <= g_highestFloor; j++) {
                    g_map.removeLayer(g_mapLayers[j]);
                }
                g_map.addLayer(g_mapLayers[g_startingFloor]);

                // Show the starting level's items
                for (var j = g_lowestFloor; j <= g_highestFloor; j++) {
                    for (var k in g_overlays[j]) {
                        toggleLayer(g_overlays[j][k], false);
                    }
                }
                for (var j in g_overlays[g_startingFloor]) {
                    toggleLayer(g_overlays[g_startingFloor][j], true);
                }
                updateNodeLayerState();

                g_mapLoaded = true;
                if (g_loadImmediate) {
                    showMap();
                }

                g_map.on('pm:drawstart', function(e) {
                    var layer = e.workingLayer;
                    layer.on('pm:vertexadded', function(e) {
                        console.log(e.latlng);
                        g_workingLedgeVertices.push([e.latlng.lat, e.latlng.lng]);
                    });
                });

                g_map.on('pm:create', function(e) {
                    g_workingLedgeLayers.push(e.layer);
                });

                g_map.on('pm:drawend', function(e) {
                    if (g_workingLedgeVertices.length === 0) {
                        for (var i in g_workingLedgeLayers) {
                            g_map.removeLayer(g_workingLedgeLayers[i]);
                        }
                        g_workingLedgeLayers = [];
                        return;
                    }

                    console.log("About to save ledge.");
                    console.log(e);

                    var data = {
                        vertices: g_workingLedgeVertices,
                        missionId: $('input[name="mission-id"]').val(),
                        level: $('input[type="hidden"][name="level"]').val()
                    };

                    $.ajax({
                        url: '/api/ledges',
                        method: 'POST',
                        data: data,
                        success: function(data) {
                            var ledge = JSON.parse(data);
                            buildLedge(ledge).addTo(g_overlays[ledge.level]['Navigation|Ledge']);
                            g_workingLedgeVertices = [];
                            toastr["success"]("Ledge successfully created!");
                        },
                        error: function() {
                            alert('Error!');
                        },
                        complete: function() {
                            for (var i in g_workingLedgeLayers) {
                                g_map.removeLayer(g_workingLedgeLayers[i]);
                            }
                            g_workingLedgeLayers = [];
                        }
                    });
                });
            },
            error: function() {
                alert('An error occurred when trying to get map nodes');
            }
        });

        // Template change
        $('select[name="template"]').change(function() {
            var $selectedItem = $('select[name="template"] option:selected');

            var $modal = $('#suggest-edit-modal');
            $modal.find('select[name="subgroup"]')
                .selectpicker('val', $selectedItem.attr('data-type') + '|' + $selectedItem.attr('data-subgroup'));
            $modal.find('select[name="subgroup"]').trigger('change');
            var icon = $selectedItem.attr('data-icon');
            $modal.find('select[name="icon"]').selectpicker('val', icon);
            $modal.find('input[name="searchable"]').val($selectedItem.attr('data-searchable'));
            $modal.find('input[name="image"]').val($selectedItem.attr('data-image'));

            var $selectedCategory = $('select[name="subgroup"] option:selected');
            if ($selectedCategory.attr('data-name') !== undefined && $selectedItem.attr('data-action') !== false) {
                $modal.find('input[name="name"]').val($selectedItem.text());
            }
            if ($selectedCategory.attr('data-action') !== undefined && $selectedItem.attr('data-action') !== false) {
                $modal.find('input[name="action"]').val($selectedItem.attr('data-target'));
            }
            if ($selectedCategory.attr('data-target') !== undefined && $selectedItem.attr('data-target') !== false) {
                $modal.find('input[name="target"]').val($selectedItem.attr('data-target'));
            }
            var $suggestNotes = $('#suggest-notes');
            $suggestNotes.html('');
            var addedNotes = false;
            if (addNoteFromTemplate($selectedItem, $suggestNotes, 'description')) {
                addedNotes = true;
            }
            if (addNoteFromTemplate($selectedItem, $suggestNotes, 'requirement')) {
                addedNotes = true;
            }
            if (addNoteFromTemplate($selectedItem, $suggestNotes, 'warning')) {
                addedNotes = true;
            }
            if (addNoteFromTemplate($selectedItem, $suggestNotes, 'information', 'info')) {
                addedNotes = true;
            }

            if (!addedNotes) {
                $suggestNotes.append($('.note-template').html());
            }
        });

        function updateNodeLayerState() {
            var currentFloor = $('input[type="hidden"][name="level"]').val();
            var $searchedItem = $('select[name="search"] option:selected');
            var bootstrapSelectInitialized = $('.search-box').find('.bootstrap-select').length > 0;
            var itemName = $searchedItem !== undefined && bootstrapSelectInitialized ? $searchedItem.text() : undefined;
            var layer = $searchedItem !== undefined && bootstrapSelectInitialized ? $searchedItem.attr('data-layer') : undefined;

            var floorsToHighlight = [];
            for (var floor in g_overlays) {
                var numberOfItemsOnMap = 0;
                var floorLayers = g_overlays[floor];
                for (var key in floorLayers) {
                    var forceOff = (layer !== key || itemName === undefined);

                    // Find the button that toggles this layer and see if it's active or not.
                    if (!$('div[data-layer="' + key + '"]').hasClass('map-hidden')) {
                        if (key !== 'Navigation|Ledge') {
                            numberOfItemsOnMap += floorLayers[key].getLayers().length;
                        }

                        toggleLayer(floorLayers[key], (parseInt(floor) === parseInt(currentFloor)));

                        if (key !== 'Navigation|Ledge') {
                            for (var node in floorLayers[key].getLayers()) {
                                var nodeProperties = floorLayers[key].getLayers()[node];

                                if (nodeProperties.options.custom.node.name === itemName && !forceOff) {
                                    $(nodeProperties._icon).addClass('search-result');
                                    if (floorsToHighlight.indexOf(floor) === -1) {
                                        floorsToHighlight.push(floor);
                                    }
                                } else {
                                    $(nodeProperties._icon).removeClass('search-result');
                                }

                                if (nodeProperties.options.custom.node.deleted === true) {
                                    g_map.removeLayer(nodeProperties);
                                    numberOfItemsOnMap--;
                                }
                            }
                        }
                    } else {
                        toggleLayer(floorLayers[key], false);
                    }
                }
                var $itemElement = $('[data-floor="' + floor + '"]').find('.item-count');
                $itemElement.text(numberOfItemsOnMap);

                $('.item-count').removeClass('has-search-results');
                for (var i in floorsToHighlight) {
                    $('div[data-floor="' + floorsToHighlight[i] + '"]').find('.item-count').addClass('has-search-results');
                }
            }
        }

        function buildLedge(ledge) {
            var latlngs = [];
            for (var j in ledge.vertices) {
                var coords = ledge.vertices[j].split(',');
                latlngs.push([coords[0], coords[1]]);
            }
            var polyline = L.polyline(latlngs, {
                color: '#fff',
                weight: 4,
                opacity: .75,
                custom: {
                    id: ledge.id
                }
            }).on('click', function() {
                if (parseInt($('input[type="hidden"][name="edit-mode"]').val()) !== 2) {
                    return;
                }

                g_openMarker = this;

                $('input[type="hidden"][name="ledge-id"]').val(this.options.custom.id);
                $('#confirm-delete-ledge-modal').modal('show');
            });

            return polyline.bindTooltip('Ledge', {sticky: true});
        }

        $('#delete-ledge-btn').click(function() {
            var $modal = $('#confirm-delete-ledge-modal');

            var ledgeId = $modal.find('input[type="hidden"][name="ledge-id"]').val();

            $.ajax({
                url: '/api/ledges/delete/' + ledgeId,
                method: 'GET',
                success: function() {
                    toastr["success"]("Ledge deleted!");
                    g_map.removeLayer(g_openMarker);
                    g_openMarker = undefined;
                    $modal.modal('hide');
                },
                error: function() {
                    toastr["error"]("Error deleting ledge!");
                }
            })
        });

        function buildMarker(node) {
            return L.marker([node.latitude, node.longitude], {
                icon: L.icon({iconUrl: '/img/map-icons/' + node.icon + '.png',
                    iconSize: [32, 32],
                    iconAnchor: [16, 16],
                    popupAnchor: [0, 0]
                }),
                custom: {
                    id: node.id,
                    node: node
                },
                draggable: true,
                riseOnHover: true
            }).on('popupopen', function() {
                g_openMarker = this;
            }).on('dragend', function(e) {
                var nodeInformation = e.target.options.custom;
                if (parseInt($('input[type="hidden"][name="edit-mode"]').val()) === 0) {
                    console.debug("Editor disabled. Sending node back.");
                    e.target.setLatLng([nodeInformation.node.latitude, nodeInformation.node.longitude]);
                    toastr["warning"]("The editor is disabled. No items can be moved unless the editor is enabled.");
                    return;
                }

                console.log(e.target);
                var $modal = $('#confirm-move-modal')
                    .find('input[name="node-id"]').val(nodeInformation.id).end()
                    .find('input[name="latitude"]').val(e.target.getLatLng().lat).end()
                    .find('input[name="longitude"]').val(e.target.getLatLng().lng).end()
                    .modal('show');
            });
        }

        function addNoteForExistingItem($suggestNotes, value, type) {
            var $temp = $('#temp');
            $temp.append($('.note-template').html());
            $temp.find('input[name="note-text[]"]').attr('value', value);
            $temp.find('select[name="note-type[]"] [value="' + type + '"]').attr('selected', true);
            $suggestNotes.append($temp.html());
            $temp.html('');
        }

        function addNoteFromTemplate($selectedItem, $suggestNotes, type, target) {
            if ($selectedItem.attr('data-' + type) === undefined ||
                $selectedItem.attr('data-' + type) === false ||
                $selectedItem.attr('data-' + type).trim() === '') {
                return false;
            }

            if (target === undefined) {
                target = type;
            }

            var $temp = $('#temp');
            $temp.append($('.note-template').html());
            $temp.find('input[name="note-text[]"]').attr('value', $selectedItem.attr('data-' + type));
            $temp.find('select[name="note-type[]"] [value="' + target + '"]').attr('selected', true);
            $suggestNotes.append($temp.html());
            $temp.html('');
            return true;
        }

        $('select[name="subgroup"]').change(function() {
            var $selectedItem = $('select[name="subgroup"] option:selected');
            $('input[name="group"]').val($selectedItem.text().trim());
            $('input[name="searchable"]').val($selectedItem.attr('data-searchable'));

            var icon = $selectedItem.attr('data-icon');
            $('#suggest-edit-modal').find('select[name="icon"]').selectpicker('val', icon);

            toggleEditorFieldDisplay($selectedItem, 'name');
            toggleEditorFieldDisplay($selectedItem, 'action');
            toggleEditorFieldDisplay($selectedItem, 'target');
            toggleEditorFieldDisplay($selectedItem, 'pickup');
            toggleEditorFieldDisplay($selectedItem, 'direction');

            var note = $selectedItem.attr('data-note');
            if (note !== undefined && note !== false) {
                $('#note-help-text').text(note);
            } else {
                $('#note-help-text').text('');
            }

            if (['Navigation|agency-pickup', 'Navigation|exit-location', 'Navigation|ledge', 'Navigation|up-stair',
                'Navigation|starting-location', 'Navigation|up-pipe'].indexOf($selectedItem.val()) > -1) {
                $('#icon-form-group').hide();
            } else {
                $('#icon-form-group').show();
            }
        });

        function toggleEditorFieldDisplay($selectedItem, attribute) {
            if ($selectedItem.attr('data-' + attribute) !== undefined && $selectedItem.attr('data-' + attribute) !== false) {
                $('[data-type="' + attribute + '"]').show();
            } else {
                $('[data-type="' + attribute + '"]').hide();
            }
        }

        $('#add-note-button').click(function() {
            var template = $('.note-template').html();

            var nextRowNumber = parseInt($('#modal').find('[data-note-row]').attr('data-note-row')) + 1;
            console.log(nextRowNumber);

            $('#suggest-notes').append(template);
        });

        $('form[action="/api/nodes"]').submit(function() {
            var $form = $(this);
            var nodeId = $form.find('input[name="id"]').val();
            var uri = '/api/nodes';
            var action = 'CREATE';

            if (nodeId > -1) {
                uri = '/api/nodes/edit/' + nodeId;
                action = 'EDIT';
            }

            $.ajax({
                url: uri,
                method: 'POST',
                data: $form.serialize(),
                success: function(data) {
                    if (action === 'EDIT') {
                        g_openMarker.options.custom.node.deleted = true;
                        g_openMarker = undefined;
                    }

                    var node = JSON.parse(data);
                    if (node.approved) {
                        var marker = buildMarker(node).bindPopup(buildPopup);
                        if (node.name !== '') {
                            marker.bindTooltip(node.name);
                        }
                        marker.addTo(g_overlays[node.level][node.type + '|' + node.group]);

                        if (action === 'CREATE') {
                            toastr["success"]('Item successfully added to map!');
                        } else {
                            toastr["success"]('Item successfully edited!');
                        }

                    } else {
                        toastr["success"]('Suggestion has been submitted. If it is approved by an administrator, it will become visible on the map.');
                    }
                    $('#suggest-edit-modal').modal('hide');
                    updateNodeLayerState();
                },
                error: function() {
                    alert('Error!');
                }
            });

            console.debug("Completed adding node.");
            return false;
        });

        $('form[action="/api/nodes/move"]').submit(function() {
            var $form = $(this);

            $.ajax({
                url: '/api/nodes/move',
                method: 'POST',
                data: $form.serialize(),
                success: function(data) {
                    toastr["success"]('Item successfully moved!');
                    $('#confirm-move-modal').modal('hide');
                },
                error: function() {
                    alert('Error!');
                }
            });

            console.debug("Completed moving node.");
            return false;
        });

        function toggleLayer(layer, shouldShow) {
            if (shouldShow) {
                g_map.addLayer(layer);
            } else {
                g_map.removeLayer(layer);
            }
        }

        function buildPopup(element) {
            var node = element.options.custom.node;

            var $template = $($('#popup-template').html());
            $template.find('[data-name="group"]').html(node.group).end()
                .find('[data-name="name"]').html(node.name).end()
                .find('[data-node-id="x"]').attr('data-node-id', node.id).end()
                .find('[data-name="target"]').find('span').html(node.target);

            if (node.target !== null && node.target !== '') {
                $template.find('[data-name="target"]').find('i').addClass(node.targetIcon);
            }

            if (node.image !== null) {
                $template.find('img').attr('src', '{{ settings.cdnLocation }}/{{ model.pngBackgroundFileExtension }}' + node.image + '.{{ model.pngBackgroundFileExtension }}');
            } else {
                $template.find('img').remove();
            }

            for (var i in node.notes) {
                var $noteTemplate = $($('#popup-note-template').html());

                $noteTemplate.find('[data-name="note-contents"]').html(node.notes[i].text).parent().addClass(node.notes[i].type);

                $template.find('[data-name="notes"]').append($noteTemplate.html());
            }

            return $template.html();
        }

        $('.floor').click(function() {
            var $formField = $('input[type="hidden"][name="level"]');
            var previousLevel = $formField.val();
            var level = $(this).parent().attr('data-floor');
            $formField.val(level);

            $('.floor').removeClass('selected');
            $(this).addClass('selected');

            toggleLayer(g_mapLayers[previousLevel], false);
            toggleLayer(g_mapLayers[level], true);
            updateNodeLayerState();
        });

        $('.search-box').find('select').change(function() {
            // Enable the layer that was selected
            var selectedOption = $(this).find('option:selected');
            if (selectedOption.length === 0) {
                updateNodeLayerState();
                return;
            }

            var layer = $(selectedOption).attr('data-layer');
            var layerButton = $('div[data-layer="' + layer + '"]');

            if (layerButton.hasClass('map-hidden')) {
                layerButton.click();
            }

            updateNodeLayerState();
        });

        $('[data-ledge="add"]').click(function() {
            if (!$(this).hasClass('selected')) {
                g_map.pm.enableDraw('Line', { snapping: 'false', finishOn: 'mouseout' });
                toastr["info"]("Click anywhere to start creating a ledge");
                $(this).addClass('selected');
                $('[data-ledge="delete-help"]').hide();
            } else {
                g_map.pm.disableDraw('Line');
                $(this).removeClass('selected');
                toastr["info"]("Ledge builder disabled");
                $('[data-ledge="delete-help"]').show();
            }
        });

        $('[data-ledge="cancel"]').click(function() {
            $('[data-ledge="add"]').removeClass('selected');
            $('[data-ledge="delete-help"]').show();
            g_map.pm.disableDraw('line');
        });

        {% if model.canDeleteNodes %}
        var $body = $('body');
        $body.on('click', '[data-action="delete-btn"]', function() {
            var nodeId = parseInt($(this).attr('data-node-id'));

            $.ajax({
                url: '/api/nodes/delete/' + nodeId,
                method: 'GET',
                success: function() {
                    toastr["success"]("Node deleted!");
                    g_openMarker.options.custom.node.deleted = true;
                    g_openMarker = undefined;
                    updateNodeLayerState();
                },
                error: function() {
                    toastr["error"]("Error deleting node!");
                }
            });
        });

        $body.on('click', '[data-action="edit-btn"]', function() {
            console.log(g_openMarker.options.custom.node);
            var node = g_openMarker.options.custom.node;
            var nodeId = node.id;

            var $modal = $('#suggest-edit-modal');

            $modal.find('select[name="subgroup"]').selectpicker('val', node.type + '|' + node.subgroup);
            $modal.find('select[name="subgroup"]').trigger('change');
            $modal.find('input[name="group"]').val(node.group);
            $modal.find('select[name="icon"]').selectpicker('val', node.icon);
            $modal.find('input[name="name"]').val(node.name).end()
                .find('input[name="latitude"]').val(node.latitude).end()
                .find('input[name="longitude"]').val(node.longitude).end()
                .find('input[name="id"]').val(node.id).end()
                .find('input[name="level"]').val(node.level).end()
                .find('input[name="target"]').val(node.target).end()
                .find('input[name="action"]').val(node.target).end()
                .find('input[name="searchable"]').val(node.searchable === true ? '1' : '0').end()
                .find('input[name="image"]').val(node.image).end()
                .find('#add-suggest-title').hide().end()
                .find('#edit-suggest-title').show().end();

            if (node.group === 'Agency Pickup') {
                $modal.find('input[name="pickup-type"]').removeAttr('checked').end()
                    .find('input[name="pickup-type"][value="' +
                        (node.target === 'Small' ? 'small' : 'large') + '"]').attr('checked', true);
            } else if (node.group === 'Stairwell') {
                $modal.find('input[name="stairwell-direction"]').removeAttr('checked').end()
                    .find('input[name="stairwell-direction"][value="' + node.icon + '"]').attr('checked', true);
            } else if (node.group === 'Ways Up/Down') {
                var icon = node.icon === 'up-pipe' ? 'up-stair' :
                    (node.icon === 'up-down-pipe' ? 'up-down-stair' :
                            'down-stair');
                $modal.find('input[name="stairwell-direction"]').removeAttr('checked').end()
                    .find('input[name="stairwell-direction"][value="' + icon + '"]').attr('checked', true);
            }

            // TODO Notes
            var $suggestNotes = $('#suggest-notes');
            $suggestNotes.html('');
            var addedNotes = false;

            $.each(node.notes, function() {
                addNoteForExistingItem($suggestNotes, this.text, this.type);
                addedNotes = true;
            });

            if (!addedNotes) {
                $suggestNotes.append($('.note-template').html());
            }


            $modal.modal('show');
        });
        {% endif %}
    </script>
{% endblock %}